const assert = require('assert')
const sinon = require('sinon')
const Ship = require('../src/model-v2')

describe('Model', function() {
  it('should proxy all calls to attributes, unless invoked as a function', function() {
    let ship = new Ship({
      name: 'Enterprise'
    })
    assert(ship().attributes.name === 'Enterprise')
    assert(ship.name === 'Enterprise')
  })
  it('should be awesome', function() {
    Ship.fetch(id)
    Ship.all()
    Ship.stream(id, callback)
    Ship.streamAll(callback)
    Ship.create(attributes)

    ship.save()
    ship.update(attributes)
    ship.fill(attributes)
    ship.validate(callback)
    ship.attributesToJson()
    ship.getAttribute(key)
    ship.setAttribute(key, value)
    ship.getAttributes()
    ship.getOriginalAttributes()
    ship.getAttributeValue(key)
    ship.hasGetMutator(key)
    ship.hasSetMutator(key)
    ship.setDateFormat(format)
    ship.isDirty(attributes)
    ship.isClean(attributes)
    ship.getDirty()
    ship.hasOne(related, foreignKey, localKey)
    ship.morphOne(related, name, type, id, localKey)
    ship.belongsTo(related, foreignKey, localKey)
    ship.morphTo(name, type, id)
    ship.hasMany(related, foreignKey, localKey)
    ship.hasManyThrough(related, through, firstKey, secondKey, localKey)
    ship.morphMany(related, name, type, id, localKey)
    ship.belongsToMany(related, table, foreignKey, relatedKey, relation)
    ship.morphToMany(related, name, table, foreignKey, relatedKey, inverse)
    ship.morphedByMany(related, name, table, foreignKey, relatedKey)
    ship.getFillable()
    ship.isFillable(key)

    Query.fetch(id)
    Query.all()
    Query.stream(id, callback)
    Query.streamAll(callback)
    Query.create(attributes)
    Query.update(attributes)
  })
})